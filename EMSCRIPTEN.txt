source ~/Tensai/GitClone/emsdk/emsdk_env.sh

//-s ALLOW_MEMORY_GROWTH=1 ->>> allows the memory array to grow if needs be, but this involves a performance cost.
//--output_eol windows|linux
// --llvm-lto 1 -> Link Time Optimization (LTO) 
//--closure 1 ->  This can help with reducing the size of the non-generated (support/glue) JS code, and with startup. However it can break if you do not do proper Closure Compiler annotations and exports.
// -fno-rtti -fno-exceptions ->>> adds overhead that is sometimes not needed. For example, in Box2D neither rtti nor exceptions are needed, and if you build the source files with -fno-rtti -fno-exceptions then it shrinks the output by 15%
// -s DISABLE_EXCEPTION_CATCHING=0 -> Catching C++ exceptions (specifically, emitting catch blocks) is turned off by default in -O1 (and above). Due to how asm.js/wasm currently implement exceptions, this makes the code much smaller and faster (eventually, wasm should gain native support for exceptions, and not have this issue).
// -s AGGRESSIVE_VARIABLE_ELIMINATION=1 ->>> Aggressive variable elimination is an asm.js feature (not relevant for wasm) that attempts to remove variables whenever possible, even at the cost of increasing code size by duplicating expressions. This can improve speed in cases where you have extremely large functions. For example it can make sqlite (which has a huge interpreter loop with thousands of lines in it) 7% faster.
// -s INLINING_LIMIT=1 ->> Disable inlining



//BUILD DEVELOPMENT VERSION
em++ --std=c++17 --memory-init-file 1 --output_eol linux -s "BINARYEN_TRAP_MODE='clamp'" \
     -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 -s TOTAL_MEMORY=67108864 \
     MainWeb.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     -o WebBuild/index.html



//BUILD WASM O3 AND OTHERS  BEST OPTIMIZED ############################
em++ -O3 --std=c++17 --memory-init-file 1 --output_eol linux \
     -s INLINING_LIMIT=1 -flto -s WASM_OBJECT_FILES=0 \
     --closure 1 --llvm-opts 3 --llvm-lto 3 -s "BINARYEN_TRAP_MODE='clamp'" \
     Main.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     -o WebBuild/index.html



//BUILD WASM O1
em++ -O1 --std=c++17 --memory-init-file 1 --output_eol linux \
     Main.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     -o WebBuild/index.html



//BUILD WASM O3
em++ -O3 --std=c++17 --memory-init-file 1 --output_eol linux \
     Main.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     -o WebBuild/index.html



//BUILD WASM WITH TOTAL_MEMORY
em++ -O3 --std=c++17 --memory-init-file 1 --output_eol linux -s TOTAL_MEMORY=67108864 \
     Main.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     -o WebBuild/index.html



//BUILD ASM.JS
em++ -O3 --std=c++17 --memory-init-file 1 --output_eol linux -s TOTAL_MEMORY=67108864 \
     Main.cpp GameController.cpp GlobalVariables.cpp \
     Factories/GameObjectFactory.cpp \
     GameObjects/DynamicGameObject.cpp GameObjects/Player.cpp GameObjects/Enemy.cpp \
     GameObjects/MenuButton.cpp GameObjects/AnimatedGraphic.cpp GameObjects/CollisionGameObject.cpp \
     GameObjects/Collider.cpp GameObjects/StaticGameObject.cpp \
     Levels/Level.cpp Levels/TileLayer.cpp Levels/LevelParser.cpp \
     Libs/tinyXml/tinyxml2.cpp Libs/base64/base64.cpp \
     Managers/TextureManager.cpp Managers/InputManager.cpp \
     States/StateParser.cpp States/MainMenuState.cpp States/GameStateMachine.cpp \
     States/PlayState.cpp States/PauseState.cpp States/GameOverState.cpp \
     -s USE_ZLIB=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 \
     -s USE_OGG=1 -s USE_VORBIS=1 \
     -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' \
     -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 \
     --preload-file Assets \
     --separate-asm -s BINARYEN=1 -s WASM=0 -o WebBuild/index.html




















     <!doctype html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Hibiki Game Engine</title>
    <style>
      body {
        font-family: arial;
        margin: 0;
        padding: none;
      }

      .emscripten { padding-right: 0; margin-left: auto; margin-right: auto; display: block; }
      div.emscripten { text-align: center; }
      div.emscripten_border { border: 1px solid black; }
      /* the canvas *must not* have any border or padding, or mouse coords will be wrong */
      canvas.emscripten { border: 0px none; background-color: black; }

      #emscripten_logo {
        display: inline-block;
        margin: 0;
      }

      .spinner {
        position: relative;
        height: 50px;
        width: 50px;
        display: flex;
        vertical-align: top;
        background-image: url(Hibiki.png);
        background-repeat: no-repeat;
        background-size: cover;
        background-position: 50% 50%;
        margin-left: 0;
        margin-right: 0;
        margin-top: 5px;
        margin-bottom: 25px;
        left: 50%;
        transform: translateX(-50%);
        /*height: 30px;
        width: 30px;
        margin: 0;
        margin-top: 20px;
        margin-left: 20px;
        display: inline-block;
        vertical-align: top;*/

        /*-webkit-animation: rotation .8s linear infinite;
        -moz-animation: rotation .8s linear infinite;
        -o-animation: rotation .8s linear infinite;
        animation: rotation 0.8s linear infinite;

        border-left: 5px solid rgb(235, 235, 235);
        border-right: 5px solid rgb(235, 235, 235);
        border-bottom: 5px solid rgb(235, 235, 235);
        border-top: 5px solid rgb(120, 120, 120);
        
        border-radius: 100%;
        background-color: rgb(189, 215, 46);*/
      }

      @-webkit-keyframes rotation {
        from {-webkit-transform: rotate(0deg);}
        to {-webkit-transform: rotate(360deg);}
      }
      @-moz-keyframes rotation {
        from {-moz-transform: rotate(0deg);}
        to {-moz-transform: rotate(360deg);}
      }
      @-o-keyframes rotation {
        from {-o-transform: rotate(0deg);}
        to {-o-transform: rotate(360deg);}
      }
      @keyframes rotation {
        from {transform: rotate(0deg);}
        to {transform: rotate(360deg);}
      }

      #status {
        margin-top: 5px;
        margin: auto;
        text-align: center;
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 25px;
        /*display: inline-block;
        vertical-align: top;
        margin-top: 30px;
        margin-left: 20px;
        font-weight: bold;
        color: rgb(120, 120, 120);*/
      }

      #progress {
        height: 20px;
        width: 300px;
      }

      #controls {
        display: inline-block;
        /*float: right;*/
        vertical-align: top;
        margin-top: 30px;
        margin-right: 20px;
      }

      #output {
        width: 100%;
        height: 200px;
        margin: 0 auto;
        margin-top: 10px;
        border-left: 0px;
        border-right: 0px;
        padding-left: 0px;
        padding-right: 0px;
        display: block;
        background-color: black;
        color: white;
        font-family: 'Lucida Console', Monaco, monospace;
        outline: none;
      }
    </style>
  </head>
  <body>
    <div id="divControls">
    <span id='controls'>
      <span><input type="checkbox" id="resize">Resize canvas</span>
      <span><input type="checkbox" id="pointerLock" checked>Lock/hide mouse pointer &nbsp;&nbsp;&nbsp;</span>
      
      <span><input type="button" value="Fullscreen" onclick="Module.requestFullscreen(document.getElementById('pointerLock').checked, document.getElementById('resize').checked)"></span>
    </span>
  </div>

    <div class="emscripten">
      <progress value="0" max="100" id="progress" hidden=1></progress>
    </div>

    <div class="emscripten_border">
      <div id="engine"><h1 style="text-align: center;">Hibiki Game Engine</h1></div>
      <div class="emscripten" id="status">Downloading...</div>
      <div class="spinner" id='spinner'></div>
      <div id="divCanvas">
        <canvas id="canvas" class="emscripten" oncontextmenu="event.preventDefault()" tabindex=-1></canvas>
      </div>
    </div>

    <script type='text/javascript'>
      var statusElement = document.getElementById('status');
      var progressElement = document.getElementById('progress');
      var spinnerElement = document.getElementById('spinner');
      var canvasElement = document.getElementById('divCanvas');
      var controlsElement = document.getElementById('divControls');
      var engineElement = document.getElementById('engine');

      canvasElement.hidden = true;

        /*
        Module['noExitRuntime'] = true;
        Module['postRun'] = function() {
          function doOne() {
            //console.log('zz doOne ' + Date.now());
            Module['_OneMainLoopIteration']();
            setTimeout(doOne, 1000/30); // Game expects to run at 30fps
          }
          doOne();
        };
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
        */

      var Module = {
        preRun: [],
        postRun: [],
        /*postRun: (function() {
          function doOne() {
            //console.log('zz doOne ' + Date.now());
            Module['_OneMainLoopIteration']();
            setTimeout(doOne, 1000/30); // Game expects to run at 30fps
          }
          doOne();
        })(),*/
        canvas: (function() {
          var canvas = document.getElementById('canvas');
          // As a default initial behavior, pop up an alert when webgl context is lost. To make your
          // application robust, you may want to override this behavior before shipping!
          // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
          canvas.addEventListener("webglcontextlost", function(e) { alert('WebGL context lost. You will need to reload the page.'); e.preventDefault(); }, false);
          canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
          canvas.requestFullScreen();

          return canvas;
        })(),
        setStatus: function(text) {
          
          if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
          if (text === Module.setStatus.last.text) return;
          var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          var now = Date.now();
          if (m && now - Module.setStatus.last.time < 30) return; // if this is a progress update, skip it if too soon
          Module.setStatus.last.time = now;
          Module.setStatus.last.text = text;
          if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2])*100;
            progressElement.max = parseInt(m[4])*100;
            progressElement.hidden = false;
            spinnerElement.hidden = false;
            canvasElement.hidden = true;
            controlsElement.hidden = true;
            engineElement.hidden = false;
          } else {
            progressElement.value = null;
            progressElement.max = null;
            if (!text) spinnerElement.style.display = 'none';
          }
          statusElement.innerHTML = text;
        },
        totalDependencies: 0,
        monitorRunDependencies: function(left) {
          this.totalDependencies = Math.max(this.totalDependencies, left);
          Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'All downloads complete.');
          progressElement.hidden = true;
          engineElement.hidden = true;
          canvasElement.hidden = false;
          controlsElement.hidden = false;
        }
      };
      Module.setStatus('Downloading...');
      window.onerror = function(event) {
        // TODO: do not warn on ok events like simulating an infinite loop or exitStatus
        Module.setStatus('Error!!!');
        spinnerElement.style.display = 'none';
        Module.setStatus = function(text) {
          if (text) Module.printErr('[post-exception status] ' + text);
        };
      };
    </script>
    <script async type="text/javascript" src="index.js"></script>
  </body>
</html>